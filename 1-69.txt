Проверка на попадание 
Из псевдокода видно, что перед проверкой на попадание необходимо убедиться, что пользователь ввел
корректные значение. Если это так. можно переходить к следующей проверке - определить, попал ли выстрел
в корабль. Нужно проследить за тем, чтобы переменные guesses and hits были обновлены по результатам проверки.
Давайте проверим корректность введенного значения, а если все правильно, увеличим переменную guesses. 
А после этого мы напишем код, проверяющий, попал пользователь в цель или промохнулся.

// Объявления переменных

while (isSunk == false) {
	guess = prompt("Ready, aim, fire!(enter a number from 0-6):");
	if (guess < 0 || guess > 6){ //Чтобы проверить корректность ввода убедимся, что значение в диапазоне
		alert("Please enter a valid cell number!")
		//Если пользователь ввел недопустимое значение, сообщаем об этом функцией alert
	}else{
		guess = guess + 1;
		//Если введенное значение корректно, увеличиваем guesses на 1(в этой переменной хранится
			количество выстрелов пользователя)
	}
}

Присмотримся повнимательнее к проверке корректности ввода. Да, мы проверяем, что значение лежит в
диапазоне от 0 до 6, но как имено выполняется эта условная проверка? Рассмотрим ее по частям:

Результат будет "истиной" (true), если значение меньше нуля ИЛИ больше шести. Если выполняется хотя бы 
одно из улсовий, значит, введенное значение некорректно.

if (guess < 0 || guess > 6){
// Это условие объединяет два меньших условия. Первое условие проверяет, что guess менбше нуля.

// А это условие проверяет, что guess больше шести.

// А эта конструкция называется оператором ИЛИ и  объединяет две проверки, чтобы в случае истинности одной
из них все "большое" условие было истинным. Если же оба меньших условия ложны, то и все выражение ложно,
а значение guess лежит в диапазоне от 0 до 6, то есть оно корректно.
}