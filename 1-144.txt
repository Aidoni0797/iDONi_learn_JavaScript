Задаваемые вопросы

В: Порядок элементов в массиве важен?

О: Чаще всего важен, но бывают и исключения. В массиве из примера с пузырями порядок очень важен, потому
что индекс массива определяет номер образца - раствор 0 дает результат 60 и это число сохраняется в элементе с 
индексом 0. Если данные в массиве будут перепутаны, весь эксперимент случаях порядок элементов роли не играет.
Например, если в массиве хранятся случайно выбранные слова, вполне возможно, что вас интересует толко само
присутствие слова в массиве. Но если позднее вы решите, что слова должны быть упорядочены по алфавиту, порядок 
станет важен. Итак, ответ на этот вопрос зависит от использования массива. Пожалуй, при работе с массивами
порядок все же важен.

В: Сколько значений можно поместить в массив?

О: Теоретически сколько угодно. На практике это число ограничено объемом памяти вашего компьютера.
Каждый элемент занимает небольшую часть памяти. Помните, что JavaScript работает в браузере, а браузер 
- всего лишь одна из программ, запущенных на вашем компьютере. Если элементы добавляются в массив снова и снова,
то вскоре память будет исчерпана. В зависимости от типа данных максимальное количество элементов в массиве
исчисляется многими тысячами, если не миллионами; на практике необходимость в таких объемах встрачается
нечасто. Не забывайте, что при большом количестве элементов программа начинает работать медленное, поэтому
размер массива лучше ограничить какой-нибудь разумной величиной - скажем, несколькими сотнями элементов.

В: Может ли массив быть пустым?

О: Да, может. Более того, вскоре вы увидите пример испольщзования пустого массива. Такой массив создается
командой.

ar emptyArray = [];

Позднее вы сможете добавить в пустой массив элементы.

В: Мы видели массивы, в которых хранятся строки и числа; можно ли размещать в массивах другие данные?

О: Да, можно. Более того, в массивах могут храниться практически любые значения JavaScript, включая строки,
числа, логические значения, другие массивы и даже объекты (об этом позднее).

В: Должны ли все значения в массиве относиться к одному типу?

О: Нет, не обязательно, хотя обычно мы храним в массивах однотипные значения. В отличие от многих других языков,
JavaScript не требует, чтобы все значения в массиве относились к одному типу. Но если вы смешиваете в
массиве разные типы, будьте внимательны при их использовании. Предположим, вы создали массив
[1,2,"fido",4,5], а потом написали код, который проверяет, что все значения в массиве больше 2. Что 
произойдет, когда вы будете сравнивать строку "fido" и цифру 2? Чтобы избежать подобных бессмысленных
операций, придется проверять тип каждого значения, прежде чем использовать его в коде. Конечно, это возможно
(далее мы покажем, как это делается), но намного проще и безопаснее хранить в массивах однотипные данные.

В: Что произойдет при попытке обращения к массиву по слишком большому или малому индексу (допустим,
меьше 0);

О: Предположим, вы объявили массив:

var a = [1,2,3];

после чего пытаетесь обратиться к элементу a[10] or a[-1]. В обоих случаях будет получен результат
underfined. Так что нужно либо следить за тем, чтобы в обращениях использовались только действительные
индексы, либо проверять результат и убеждаться, что он отличен от underfined.

В: Первый элемент массива хранится в элементе с индексом 0. А как узнать индекс последнего элемента в массиве?
Нужно ли точно знать, сколько элементов содержит массви?

О: Используйте свойство length, чтобы узнать размер массива. length всегда на 1 больше последнего индекса так?
Для получения последнего элемента можно написать:

myArray[myArray.length-1];

JavaScript получает длину массива, уменьшает ее на 1, после чего получает значение по заданному индексу.
Если массив содержит 10 элементов, то вы получите элемент с индексом 9 - то, что нужно. Этот прием можно 
использовать для получения последнего элемента массива, еслы вы точно не знаете, сколько элементов содержит
массив.