Пошаговое выполнение функции с командной return

Теперь, когда вы знаете, как работают аргументы и параметры и как функция возвращает значение, мы
последовательно проанализируем вызов функции от начала до конца и посмотрим, что происходит на каждом
шаге. Обязательно следите за выполнением действий в указанном порядкею.

1. Объявляем переменную radius и инициализируем ее значением 5.2.
2. Затем программа вызывает функцию calculateArea и передает переменную radius как аргумент.
3. Аргумент присваивается параметру r. Функция calculateArea начинает выполняться с параметром r,
содержащим значение 5.2.
4. Тело функции начинает выполняться с объявления переменной area. Затем мы проверяем, имеет ли параметр
r значение <=0.
5. Если r<=0, то функция возвращает 0 и перестает выполняться. В нашем примере передается значение 5.2, так
что эта строка НЕ выполняется.
6. Вместо этого выполняется секция else.
7. Программа вычисляется площадь круга, используя значение 5.2 параметра r.
8. Функция возвращает вычисленное значение. Выполнение функции на этом преклащается.
9. Значение, возвращаемое функцией, сохраняется в переменной theArea.
10. Выполнение продолжается со следующей строки.

function calculateArea(r){
	var area;
	if (r<=0) {
		return 0;
	}else{
		area = Math.PI*r*r;
		return area;
	}
}
var radius = 5.2;
var theArea = calculateArea(radius);
console.log("The area is: "+theArea);

Разработчики часто называют такой анализ "трассировкой потока управления". Как видите, при вызове
функций и возврате значений управление может передаваться из одной точки программы в другую. Просто
внимательно и без спешки разберите происходящее, шаг за шагом.