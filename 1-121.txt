Задаваемые вопросы

В: Следить за локальлными и глобальными переменными хлопотно, почему не ограничиться одними глобальными?
Я всегда так делаю.

О: Если вы пишете сколько-нибудь сложны код (или код, который будет сопровождаться в течение некоторого
времени), вам неизбежно придется заняться управлением переменными. При злоупотреблении глобальными
переменными становится трудно следить за тем, где используются переменные (и где изменяются их значения),
а это может привести к ошибкам в коде. Это обстоятельство начинает играть еще более важную роль при
совместной работе над кодом или при использовании сторонних библиотек (хотя хорошо написанная библиотека
имеет структуру, при которой такие проблемы не возникают).

Итак, используйте глобальные переменные там, где это оправданно, но будьте умеренны - и везде, где это
возможно, используйте локальные переменные. По мере накопление опыта JavaScript вы освоите дополнительные
способы структурирования кода, упрощающие его сопровождение.

В: В моей странице используются глобальные переменные, но я также загружаю другие файлы JavaScript. В этих
файлах используются отдельные наборы глобальных переменных?

О: Глобальная область действия только одна, так что все загружаемые файлы работают с одним набором переменных
(и создают глобальные переменные в этом же пространстве). Вот почему так важно избегать конфликтов имен
(а также по возможности сократить использование глобальных переменных или даже отказаться от них).

В: Если имя параметра совпадает с именем глобальной переменной, значит ли это, что параметр "замещать" 
глобальную переменную?

О: Да - точно так же, как происходит при объявлении в функции новой локальной переменной с таким же именем,
как у глобальной. Замещение глобального имени вполне допустимо, если вы увереныы, что глобальная
переменная не должна использоваться внутри функции. Впрочем, лучше включить в программу комментарий,
чтобы не создавать проблем при последующем чтении вашего кода.

В: Если перезагрузить страницу в браузере, все глобальные переменные будут инициализировано заново?

О: Да. Перезагрузка страницы фактически начинает ее существование заново (в том, что касается переменных).
А если во время перезагрузки выполнялся какой-то код, то все локальные переменные тоже исчезнут.

В: Должны ли локальные переменные всегда объявляться в начале функции?

О: Как и в случае с глобальными переменными, локальные переменные можно объявлять непосредственно перед
их первым использованием функции. Тем не менее у программистов принято объявлять переменные в начале функции,
чтобы каждый, кто будет читать ваш код, мог легко найти эти объявления и сразу получить представление
обо всех локальных переменных, используемых в функции, чтобы каждый, кто будет читать ваш код, мог легко
найти эти объявления и сразу получить представление обо всех локальных переменных, используемых в функции.
Кроме того, если вы отложите объявление переменной, а потом случайно используете переменную в теле функции 
раньше, чем предпологалось, это может привести к неожиданным последствиям. JavaScript создает все 
локальные переменные в начале функции независимо от того, объявляются они или нет, но все переменные содержат
underfined до момента инициализации - возможно, это не то, что вам нужно.

В: Часто приходится слышать жалобы на злоупотребление глобальными переменными в JavaScript. Почему это
происходит? Язык был плохо спроектирован, или люди не понимают, что творят ... или что? И как с этим бороться?

О: Действительно, многие программисты злоупотребляют глобальными переменными в JavaScript. Отчасти это
объясняется тем, что с этим языком легко взяться за работу и начать программировать, - и это хорошо,
потому что JavScript не заставляет программиста обязательно использовать жесткую структуру кода.
С другой стороны, кода на JavaScript так пишется серьезный код, который должен сопровождаться в течение
значительного времени (а это отночится практически ко всем веб-страницам), возникают проблемы. Впрочем,
JavaScript - мощный язык, в котором предусмотрена поддержка таких конструкций, как объекты,
обеспечивающие модульное строение кода. На эту тему написано много книг, а ваше первое знакомство с объектами
состоится в главе 5 (остались какие-тоо эве главы).